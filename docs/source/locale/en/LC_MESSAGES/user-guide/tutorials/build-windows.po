# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Anaconda, Inc.
# This file is distributed under the same license as the Conda package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Conda  \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 12:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/user-guide/tutorials/build-windows.rst:3
msgid "Building conda packages on Windows"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:10
msgid ""
"This tutorial describes how to use conda build to create conda packages "
"on the Windows operating system, using the examples of SEP and pySLALIB."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:14
msgid ""
"The final built packages from this tutorial are available on `Anaconda "
"Cloud <https://anaconda.org>`_:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:17
msgid "`SEP <https://anaconda.org/wwarner/sep/files>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:19
msgid "`pySLALIB <https://anaconda.org/wwarner/pyslalib/files>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:21
msgid ""
"This tutorial also describes writing recipes. You can see the final `SEP "
"recipe <https://github.com/conda/conda-docs/tree/master/docs/source/user-"
"guide/tutorials/sep>`_ and the `pySLALIB recipe <https://github.com/conda"
"/conda-docs/tree/master/docs/source/user-guide/tutorials/pyslalib>`_ on "
"GitHub in the `conda documentation repository <https://github.com/conda"
"/conda-docs>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:31
msgid "Before you start"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:33
msgid "Before you start, check the :doc:`prerequisites <index>`."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:37
msgid "Toolkit"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:40
msgid "Microsoft Visual Studio"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:42
msgid ""
"In the standard practices of the conda developers, conda packages for "
"different versions of Python are each built with their own version of "
"Visual Studio (VS):"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:46
msgid "Python 2.7 packages with Visual Studio 2008"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:47
msgid "Python 3.4 packages with VS 2010"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:48
msgid "Python 3.5 packages with VS 2015"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:49
msgid "Python 3.6 packages with VS 2015"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:51
msgid ""
"Using these versions of VS to build packages for each of these versions "
"of Python is also the practice used for the official python.org builds of"
" Python. Currently VS 2008 and VS 2010 are available only through "
"resellers, while VS 2015 can be purchased online from Microsoft."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:59
msgid "Alternatives to Microsoft Visual Studio"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:61
msgid ""
"There are free alternatives available for each version of the VS "
"compilers:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:64
msgid ""
"Instead of VS 2008, it is often possible to substitute the `free "
"Microsoft Visual C++ Compiler for Python 2.7 <https://www.microsoft.com"
"/en-us/download/details.aspx?id=44266>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:68
msgid ""
"Instead of VS 2010, it is often possible to substitute the `free "
"Microsoft Windows SDK for Windows 7 and .NET Framework 4 "
"<https://www.microsoft.com/en-us/download/details.aspx?id=8279>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:72
msgid ""
"Make sure that you also install `VS 2010 Service Pack 1 (SP1) "
"<https://www.microsoft.com/en-us/download/details.aspx?id=23691>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:75
msgid ""
"Due to a bug in the VS 2010 SP1 installer, the compiler tools may be "
"removed during installation of VS 2010 SP1. They can be restored as "
"described in `Microsoft Visual C++ 2010 Service Pack 1 Compiler Update "
"for the Windows SDK 7.1 <https://www.microsoft.com/en-"
"us/download/details.aspx?id=4422>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:81
msgid ""
"Visual Studio 2015 has a `full featured free Community edition "
"<https://www.visualstudio.com/en-us/products/visual-studio-community-"
"vs.aspx>`_ for academic research, open source projects and certain other "
"use cases."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:87
msgid ""
"The MS Visual C++ Compiler for Python 2.7 and the Microsoft Windows SDK "
"for Windows 7 and .NET Framework 4 are both reasonably well tested. Conda"
" build is carefully tested to support these configurations, but there are"
" known issues with the CMake build tool and these free VS 2008 and 2010 "
"alternatives. In these cases, you should prefer the \"NMake Makefile\" "
"generator, rather than a Visual Studio solution generator."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:97
msgid "Windows versions"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:99
msgid ""
"You can use any recent version of Windows. These examples were built on "
"Windows 8.1."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:103
msgid "Other tools"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:105
msgid ""
"Some environments initially lack tools such as bzip2 or Git that may be "
"needed for some build workflows."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:108
msgid "Git is available through conda: ``conda install git``"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:110
msgid ""
"You can obtain bzip2 the same way. The conda bzip2 package includes only "
"the bzip2 library and not the bzip2 executable, so some users may need to"
" install the bzip2 executable from another source such as "
"http://gnuwin32.sourceforge.net/packages/bzip2.htm. Place this executable"
" somewhere on PATH. One good option is to place it in your "
"Miniconda/Anaconda install path, in the ``Library/bin`` folder."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:120
msgid "Developing a build strategy"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:122
msgid ""
"Conda recipes are typically built with a trial-and-error method. Often "
"the first attempt to build a package fails with compiler or linker "
"errors, often caused by missing dependencies. The person writing the "
"recipe then examines these errors and modifies the recipe to include the "
"missing dependencies, usually as part of the ``meta.yaml`` file. Then the"
" recipe writer attempts the build again, and after a few of these cycles "
"of trial and error, the package builds successfully."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:133
msgid "Building with a Python version different from your Miniconda installation"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:135
msgid ""
"Miniconda2 and Miniconda3 can each build packages for either Python 2 or "
"Python 3 simply by specifying the version you want. Miniconda2 includes "
"only Python 2, and Miniconda3 includes only Python 3."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:140
msgid ""
"Installing only one makes it easier to keep track of the builds, but it "
"is possible to have both installed on the same system at the same time. "
"If you have both installed, use the ``where`` command to see which "
"version comes first on PATH since this is the one you will be using::"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:148
msgid ""
"To build a package for a Python version other than the one in your "
"Miniconda installation, use the ``--python`` option in the ``conda-"
"build`` command."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:152
msgid "EXAMPLE: To build a Python 3.5 package with Miniconda2::"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:156
msgid ""
"NOTE: Replace ``recipeDirectory`` with the name and path of your recipe "
"directory."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:161
msgid "Automated testing"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:163
msgid ""
"After the build, if the recipe directory contains a test file named "
"``run_test.bat`` on Windows, or ``run_test.sh`` on macOS or Linux, or "
"``run_test.py`` on any platform, the file runs to test the package, and "
"any errors are reported."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:168
msgid ""
"NOTE: Use the :ref:`Test section of the meta.yaml file <meta-test>` to "
"move data files from the recipe directory to the test directory when the "
"test is run."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:174
msgid "Building a SEP package with conda and Python 2 or 3"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:176
msgid ""
"The `SEP documentation <https://sep.readthedocs.io>`_ states that SEP "
"runs on Python 2 and 3, and it depends only on NumPy. Searching for SEP "
"and PyPI shows that there is already `a PyPI package for SEP "
"<https://pypi.python.org/pypi/sep>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:181
msgid ""
"Because a PyPI package for SEP already exists, the ``conda skeleton`` "
"command can make a skeleton or outline of a conda recipe based on the "
"PyPI package. Then the recipe outline can be completed manually, and "
"conda can build a conda package from the completed recipe."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:189
msgid "Install Visual Studio"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:191
msgid ""
"If you have not already done so, install the appropriate version of "
"Visual Studio:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:194
msgid "For Python 3---Visual Studio 2015:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:196
#: ../../source/user-guide/tutorials/build-windows.rst:202
msgid "Choose Custom install."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:198
msgid "Under Programming Languages, choose to install Visual C++ ."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:200
msgid "For Python 2---Visual Studio 2008:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:204
msgid "Choose to install X64 Compilers and Tools. Install Service Pack 1."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:209
msgid "Make a conda skeleton recipe"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:211
msgid "Run the skeleton command::"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:215
msgid ""
"The ``skeleton`` command installs into a newly created directory called "
"``sep``."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:218
msgid "Go to the ``sep`` directory to view the files::"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:222
msgid "Three skeleton files have been created:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:224
msgid "``bld.bat`` for Windows."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:225
msgid "``build.sh`` for macOS/Linux."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:226
msgid "``meta.yaml`` for all platforms."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:230
msgid "Edit the skeleton files"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:232
msgid ""
"For this package, ``bld.bat`` and ``build.sh`` need no changes. You need "
"to edit the ``meta.yaml`` file to add the dependency on NumPy and add an "
"optional test for the built package by importing it."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:237
msgid ""
"In the requirements section of the ``meta.yaml`` file, add a line that "
"adds NumPy as a requirement to build the package."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:240
msgid "Add a second line to list NumPy as a requirement to run the package."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:243
msgid "Set the NumPy version to the letters ``x.x``."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:245
msgid "Make sure the new line is aligned with ``- python`` on the line above it."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:248
#: ../../source/user-guide/tutorials/build-windows.rst:283
msgid "EXAMPLE:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:261
msgid ""
"NOTE: Using the letters ``x.x`` instead of a specific version such as "
"``1.11`` pins NumPy dynamically, so that the actual version of NumPy is "
"taken from the build command. Currently NumPy is the only package that "
"can be pinned dynamically. Pinning is important for SEP because this "
"package uses NumPy's C API through Cython. That API changes between NumPy"
" versions, so it is important to use the same NumPy version at runtime "
"that was used at build time."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:271
msgid "Optional---Add a test for the built package"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:273
msgid ""
"Adding this optional test will test the package at the end of the build "
"by making sure that the Python statement ``import sep`` runs "
"successfully:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:277
msgid ""
"In the test section, remove the ``#`` used to comment out the lines "
"``test:`` and ``imports:``."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:280
msgid ""
"Add ``- sep``, checking to be sure that the indentation is consistent "
"with the rest of the file."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:294
msgid "Create a test file"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:296
msgid ""
"Make a new test file called ``run_test.py`` containing the following code"
" adapted from `Background estimation and source detection "
"<https://sep.readthedocs.org/en/v0.5.x/detection.html>`_, and save it to "
"the ``sep`` directory:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:316
msgid "After the build, this file is run to test the newly built package."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:318
msgid "Now the recipe is complete."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:322
msgid "Build the package"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:324
msgid "Build the package using the recipe you just created::"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:330
msgid "Check the output"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:332
msgid ""
"Check the output to make sure that the build completed successfully. The "
"output contains the location of the final package file and a command to "
"upload the package to Anaconda Cloud."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:337
msgid ""
"If there are any linker or compiler errors, modify the recipe and build "
"again."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:342
msgid "Building a pySLALIB package with conda and Python 2 or 3"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:344
msgid ""
"This procedure describes how to build a package with Python 2 or Python "
"3. Follow the instructions for the version that you want to build with."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:348
msgid ""
"Because pySLALIB includes Fortran, building it requires a Fortran "
"compiler. Because there is no PyPI package for pySLALIB, you cannot use a"
" skeleton recipe generated by using ``conda skeleton``. You must create "
"the recipe from scratch. The steps to build pySLALIB are similar to the "
"steps to build SEP, but they also include installing the Fortran "
"compiler, writing ``meta.yaml`` to fetch the package from GitHub instead "
"of PyPI and applying the correct patches to the Fortran code."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:357
msgid "To build a pySLALIB package:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:359
msgid "Install Visual Studio:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:361
msgid ""
"For Python 3, install Visual Studio 2015. Choose Custom install. Under "
"Programming Languages, choose to install Visual C++."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:365
msgid ""
"For Python 2, install Visual Studio 2008. Choose Custom install. Choose "
"to install X64 Compilers and Tools. Install Visual Studio 2008 Service "
"Pack 1."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:369
msgid ""
"Install Intel Parallel Studio Composer Edition. Go to `the Intel Fortran "
"Compilers page <https://software.intel.com/en-us/fortran-compilers>`_. "
"Choose Try & Buy. Choose Parallel Studio Composer Edition for Windows. "
"You may choose the version with Fortran only instead of the version with "
"Fortran and C++. There is a free 30-day trial available. Fill out the "
"form, including your email address. Intel will email you a download link."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:378
msgid ""
"For Python 3, download and install Intel Parallel Studio XE Composer "
"Edition for Fortran Windows."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:381
msgid ""
"For Python 2, open the download page for Intel Parallel Studio XE "
"Composer Edition for Fortran Windows. Select Additional downloads, latest"
" updates and prior versions. Select version 2013 Update 6. This is Intel "
"Visual Fortran Composer XE 2013 SP1 (compiler version 14.0), the most "
"recent Intel Fortran compiler that works with Visual Studio 2008. Choose "
"Download Now and install this version."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:389
msgid ""
"Install Git. Because the pySLALIB package sources are retrieved from "
"GitHub for the build, you must install Git::"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:394
msgid ""
"Make a recipe. You can write a recipe from scratch, or use the `recipe we"
" wrote <https://github.com/conda/conda-docs/tree/master/docs/source/user-"
"guide/tutorials/pyslalib>`_. This recipe contains 4 files:"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:399
msgid ""
"``meta.yaml`` sets the GitHub location of the pySLALIB files and how the "
"system will apply the ``intel_fortran_use.patch``."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:402
msgid ""
"``bld.bat`` is a Windows batch script that ensures that the correct "
"32-bit or 64-bit libraries are linked during the build and runs the "
"build."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:405
msgid ""
"``run_test.py`` is a test adapted from the one in the pySLALIB GitHub "
"repository to check that the build completed successfully."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:408
msgid ""
"``intel_fortran_use.patch`` is a patch to the pySLALIB Fortran code so "
"that it works with the Intel Fortran compiler."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:412
msgid ""
"In your home directory, create a recipe directory named ``pyslalib`` and "
"copy in the 4 files mentioned in the previous step."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:416
msgid "Build the package."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:418
msgid ""
"For Python 3, in the **Apps** menu, under Intel Parallel Studio XE 2016, "
"open the Compiler 16.0 Update 3 for Intel 64 Visual Studio 2015 "
"environment command prompt."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:422
msgid ""
"For Python 2, in the **Apps** menu, under Intel Parallel Studio XE 2013, "
"open the Intel 64 Visual Studio 2008 mode command prompt."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:425
msgid ""
"Run ``conda-build``, using the correct path name of the recipe directory,"
" including your correct user name. In this example, the user name is "
"\"builder\"::"
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:431
msgid ""
"Check the output to make sure the build completed successfully. The "
"output also contains the location of the final package file and a command"
" to upload the package to Cloud."
msgstr ""

#: ../../source/user-guide/tutorials/build-windows.rst:436
msgid ""
"In case of any linker or compiler errors, modify the recipe and run it "
"again."
msgstr ""

