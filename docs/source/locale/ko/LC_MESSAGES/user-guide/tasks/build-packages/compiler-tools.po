# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Anaconda, Inc.
# This file is distributed under the same license as the Conda package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Conda  \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-11 11:28+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:3
msgid "Anaconda compiler tools"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:5
msgid ""
"Anaconda 5.0 switched from OS-provided compiler tools to our own "
"toolsets. This allows improved compiler capabilities, including better "
"security and performance. This page describes how to use these tools and "
"enable these benefits."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:11
msgid "Compiler packages"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:13
msgid ""
"Before Anaconda 5.0, compilers were installed using system tools such as "
"XCode or ``yum install gcc``. Now there are conda packages for Linux and "
"macOS compilers. Unlike the previous gcc 4.8.5 packages that included "
"gcc, g++ and gfortran all in the same package, these conda packages are "
"split into separate compilers:"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:19
msgid "Linux:"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:21
msgid "gcc_linux-64"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:22
msgid "gxx_linux-64"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:23
msgid "gfortran_linux-64"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:25
msgid "macOS:"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:27
msgid "clang_osx-64"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:28
msgid "clangxx_osx-64"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:29
msgid "gfortran_osx-64"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:31
msgid ""
"A compiler's \"build platform\" is the platform where the compiler runs "
"and builds the code."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:34
msgid ""
"A compiler's \"host platform\" is the platform where the built code will "
"finally be hosted and run."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:37
msgid ""
"Notice that all of these package names end in a platform identifier which"
" specifies the host platform. All compiler packages are specific to both "
"the build platform and the host platform."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:42
msgid "Using the compiler packages"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:44
msgid ""
"The compiler packages can be installed with conda. Because they are "
"designed with (pseudo) cross-compiling in mind, all of the executables in"
" a compiler package are \"prefixed.\" Instead of ``gcc``, the executable "
"name of the compiler you use will be something like ``x86_64-conda_cos6"
"-linux-gnu-gcc``. These full compiler names are shown in the build logs, "
"recording the host platform and helping prevent the common mistake of "
"using the wrong compiler."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:51
msgid ""
"Many build tools such as ``make`` and ``cmake`` search by default for a "
"compiler named simply ``gcc``, so we set environment variables to point "
"these tools to the correct compiler."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:55
msgid ""
"We set these variables in conda ``activate.d`` scripts, so any "
"environment in which you will use the compilers must first be activated "
"so the scripts will run. Conda-build does this activation for you using "
"activation hooks installed with the compiler packages in "
"``CONDA_PREFIX/etc/conda/activate.d``, so no additional effort is "
"necessary."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:61
msgid ""
"You can activate the root environment with the command ``source activate "
"root``."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:64
msgid "macOS SDK"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:66
msgid ""
"The macOS compilers require the macOS 10.9 SDK. The SDK license prevents "
"it from being bundled in the conda package."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:69
msgid "We know of two current sources for the macOS 10.9 SDK:"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:71
msgid "https://github.com/devernay/xcodelegacy"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:72
msgid "https://github.com/phracker/MacOSX-SDKs"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:74
msgid ""
"We usually install this SDK at ``/opt/MacOSX10.9.sdk`` but you may "
"install it anywhere."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:77
msgid "Edit your ``conda_build_config.yaml`` file to point to it, like this::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:82
msgid ""
"At Anaconda we have this configuration setting in a centralized "
"``conda_build_config.yaml`` at the root of our recipe repository. Since "
"we run build commands from that location, the file and the setting are "
"used for all recipes."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:87
msgid ""
"The ``conda_build_config.yaml`` search order is described further at :ref"
":`conda-build-variant-config-files`."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:91
msgid "Backward compatibility"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:93
msgid ""
"Some users want to use the latest Anaconda packages but do not yet want "
"to use the Anaconda compilers. To enable this, the latest Python package "
"builds have a default ``_sysconfigdata`` file. This file sets the "
"compilers provided by the system, such as ``gcc`` and ``g++``, as the "
"default compilers. This way legacy recipes will keep working."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:99
msgid ""
"Python packages also include an alternative ``_sysconfigdata`` file that "
"sets the Anaconda compilers as the default compilers. The Anaconda Python"
" executable itself is made with these Anaconda compilers."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:103
msgid ""
"The compiler packages set the environment variable "
"``_PYTHON_SYSCONFIGDATA_NAME``, which tells Python which "
"``_sysconfigdata`` file to use. This variable is set at activation time "
"using the activation hooks described above."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:108
msgid ""
"The new ``_sysconfigdata`` customization system is only present in recent"
" versions of the Python package. Conda-build automatically tries to use "
"the latest Python version available in the currently configured channels,"
" which normally gets the latest from the default channel. If you're using"
" something other than conda-build while working with the new compilers, "
"conda does not automatically update Python, so make sure you have the "
"correct ``_sysconfigdata`` files by updating your Python package "
"manually."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:117
msgid "Anaconda compilers and conda-build 3"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:119
msgid ""
"The Anaconda 5.0 compilers and conda-build 3 are designed to work "
"together."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:121
msgid ""
"Conda-build 3 defines a special jinja2 function, ``compiler()``, to make "
"it easy to specify compiler packages dynamically on many platforms. The "
"``compiler`` function takes at least one argument, the language of the "
"compiler to use::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:130
msgid ""
"\"Cross-capable\" recipes can be used to make packages with a host "
"platform different than the build platform where conda-build runs. To "
"write cross-capable recipes you may also need to use the \"host\" section"
" in the requirements section. In this example we set \"host\" to \"zlib\""
" to tell conda-build to use the zlib in the conda environment and not the"
" system zlib. This makes sure conda-build uses the zlib for the host "
"platform and not the zlib for the build platform."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:146
msgid ""
"Generally the build section should include compilers and other build "
"tools, and the host section should include everything else, including "
"shared libraries, Python, and Python libraries."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:151
msgid "Customizing the compilers"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:153
msgid ""
"The compiler packages listed above are small packages that only include "
"the activation scripts and list most of the software they provide as "
"runtime dependencies."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:157
msgid ""
"This design is intended to make it easy for you to customize your own "
"compiler packages by copying these recipes and changing the flags. You "
"can then edit the ``conda_build_config.yaml`` file to specify your own "
"packages."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:161
msgid ""
"We have been careful to select good, general purpose, secure and fast "
"flags. We have also used them for all packages in Anaconda Distribution "
"5.0.0, except for some minor customizations in a few recipes. When "
"changing these flags, remember that choosing the wrong flags can reduce "
"security, reduce performance and cause incompatibilities."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:167
msgid "With that warning in mind, let's look at good ways to customize clang."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:169
msgid ""
"Download or fork the code from "
"https://github.com/anacondarecipes/aggregate . The clang package recipe "
"is in the clang folder. The main material is in the llvm-compilers-"
"feedstock folder."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:173
msgid "Edit ``clang/recipe/meta.yaml``::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:179
msgid ""
"The name here does not matter but the output names below do. Conda-build "
"expects any compiler to follow the BASENAME_PLATFORMNAME pattern, so it "
"is important to keep the ``{{target_platform}}`` part of the name."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:183
msgid ""
"``{{ version }}`` is left as an intentionally undefined jinja2 variable. "
"It is set later in ``conda_build_config.yaml``."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:186
msgid ""
"Before any packaging is done, run the build.sh script: "
"https://github.com/AnacondaRecipes/aggregate/blob/master/clang/build.sh"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:189
msgid ""
"In this recipe, values are changed here. Those values are inserted into "
"the activate scripts that are installed later."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:224
msgid ""
"With those changes to the activate scripts in place, it's time to move on"
" to installing things. Look back at the clang folder's ``meta.yaml``. "
"Here's where we change the package name. Notice what comes before the "
"``{{ target_platform }}``."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:237
msgid ""
"The script reference here is another place you might add customization. "
"You'll either change the contents of those install scripts, or change the"
" scripts that those install scripts are installing."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:241
msgid ""
"Note that we make the package ``clang`` in the main material agree in "
"version with our output version. This is implicitly the same as the top-"
"level recipe. The ``clang`` package sets no environment variables at all,"
" so it may be difficult to use directly."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:246
msgid "Let's examine the script ``install-clang.sh``::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:262
msgid "Nothing here is too unusual."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:264
msgid ""
"Activate scripts are named according to our package name so they won't "
"conflict with other activate scripts."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:267
msgid ""
"The symlink for clang is a clang implementation detail that sets the host"
" platform."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:270
msgid ""
"We define ``macos_machine`` in aggregate's ``conda_build_config.yaml``: "
"https://github.com/AnacondaRecipes/aggregate/blob/master/conda_build_config.yaml#L79"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:273
msgid ""
"The activate scripts that are being installed are where we actually set "
"the environment variables. Remember that these have been modified by "
"build.sh."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:276
msgid "With any of your desired changes in place, go ahead and build the recipe."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:278
msgid ""
"You should end up with a super_duper_clang_osx-64 package. Or, if you're "
"not on macOS and are modifying a different recipe, you should end up with"
" an equivalent package for your platform."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:283
msgid "Using your customized compiler package with conda-build 3"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:285
msgid ""
"Remember the Jinja2 function, ``{{ compiler('c') }}``? Here's where that "
"comes in. Specific keys in ``conda_build_config.yaml`` are named for the "
"language argument to that jinja2 function. In your "
"``conda_build_config.yaml``, add this::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:293
msgid ""
"Note that we're not adding the ``target_platform`` part, which is "
"separate. You can define that key, too::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:301
msgid ""
"With those two keys defined, conda-build will try to use a compiler "
"package named ``super_duper_clang_win-64``. That package needs to exist "
"for your native platform. For example, if you're on macOS, your native "
"platform is ``osx-64``."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:305
msgid ""
"The package subdirectory for your native platform is the build platform. "
"The build platform and the ``target_platform`` can be the same, and they "
"are the same by default, but they can also be different. When they are "
"different, you're cross-compiling."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:310
msgid ""
"If you ever needed a different compiler key for the same language, "
"remember that the language key is arbitrary. For example, we might want "
"different compilers for Python and for R within one ecosystem. On Windows"
" the Python ecosystem uses the Microsoft Visual C compilers, while the R "
"ecosystem uses the Mingw compilers."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:316
msgid "Let's start in ``conda_build_config.yaml``::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:325
msgid "In Python recipes, you'd have::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:331
msgid "In R recipes, you'd have::"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:337
msgid ""
"This example is a little contrived, because the ``m2w64-gcc_win-64`` "
"package is not available. You'd need to create a metapackage "
"``m2w64-gcc_win-64`` to point at the ``m2w64-gcc`` package, which does "
"exist on the msys2 channel on `repo.continuum.io "
"<https://repo.continuum.io/>`_ ."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:343
msgid "Build tool customizations and workarounds for common problems"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:345
msgid ""
"Our Linux compilation toolchains are somewhat exotic in nature. We refer "
"to them as being psuedo-cross compilers. What we mean by this is that the"
" compilers and linkers do not look for `system` headers and libraries in "
"the usual places (``/usr/include`` and ``/usr/lib*``) and instead use "
"their own ``sysroot`` directory. This causes some build tools to "
"misbehave and we've either had (or decided it is best) to make certain "
"customizations to some of our build tools in the interests of "
"compatibility and also to allow recipes to remain free from these "
"concerns. As such, when building conda packages (and indeed when using "
"these toolchains and our libraries at all) it is recommended to use conda"
" to install them. Bugs reported when using system-provided versions will "
"result in a recommendation to use ours instead. We are actively working "
"to make sure that conda-forge also provides these tools."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:357
msgid "CMake"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:359
msgid ""
"``CMake`` has support for sysroots but no facility to query the compiler "
"for the value of the ``sysroot``. Any GCC based cross-compiler will "
"happily return this folder. Instead, at worst it will find system headers"
" and libraries and your software will not work on older ditributions or "
"on any distribution where that library is not installed and at best, it "
"will not look in our ``sysroot`` directory and therefore not find the "
"headers and libraries. This is most frequently seen in libraries that use"
" ``find_library(LIBRT rt)`` and ``find_library(PTHREADS pthreads)``; "
"ironically neither of these need to be linked to explicitly on Linux "
"these days!"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:367
msgid ""
"In this instance we feel that ``CMake`` should query the compilers to "
"determine the ``sysroot`` by calling ``${CC} --print-sysroot``. We have "
"filed an issue with ``CMake`` at "
"https://gitlab.kitware.com/cmake/cmake/issues/17483 to explore this but "
"have not found time to write this feature and make a PR yet. Instead we "
"use a ``CMAKE_TOOLCHAIN_FILE``. An example of using a toolchain file can "
"be found at https://github.com/AnacondaRecipes/libnetcdf-"
"feedstock/tree/master/recipe"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:374
msgid "pkg-config"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:376
msgid ""
"``pkg-config`` will not, by default look in ``${CONDA_PREFIX}``. In the "
"past, to correct this we had been setting various environment variables "
"in each ``build.sh``. This was brittle and messy so instead we've "
"consolidated this into ``pkg-config``. It is now a bash script that sets "
"the appropriate variables before calling the real ``pkg-config`` "
"executable and returning the result. The code for this can be seen at "
"https://github.com/AnacondaRecipes/pkg-config-"
"feedstock/blob/master/recipe/pkg-config"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:383
msgid "Qt (macOS)"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:385
msgid ""
"The ``Anaconda Distribution`` does not require installing ``Xcode``. The "
"distribution can (almost) be built from source without it. Unfortunately "
"``Qt`` hard-codes the use of ``/usr/bin/xcodebuild`` and "
"``/usr/bin/xcrun``. We have changed this in patches to the source for our"
" ``Qt`` packages (https://github.com/AnacondaRecipes/qt-"
"feedstock/blob/master/recipe/0001-qtwebengine-allow-any-xcblah-in-"
"PATH.patch and https://github.com/AnacondaRecipes/qt-"
"feedstock/blob/master/recipe/0011-osx-allow-any-xcrun-in-PATH.patch) so "
"that ``xcodebuild`` and ``xcrun`` are used instead (and ``PATH`` lookup "
"finds them). For this to work, we have created fake ``xcodebuild`` and "
"``xcrun`` scripts (https://github.com/AnacondaRecipes/qt-"
"feedstock/blob/master/recipe/xcodebuild and "
"https://github.com/AnacondaRecipes/qt-feedstock/blob/master/recipe/xcrun)"
" that return values needed to achieve compatibiltiy with the ``Anaconda "
"Distribution``. These scripts cannot live in ``${CONDA_PREFIX}/bin`` "
"without risking disruption to ``Xcode`` users, therefore they are "
"installed in ``${CONDA_PREFIX}/bin/xc-avoidance``. To use them you should"
" add this to ``PATH`` in ``build.sh``. An example of this can be seen at "
"https://github.com/AnacondaRecipes/pyqt-"
"feedstock/blob/master/recipe/build.sh#L8"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:397
msgid "libtool"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:399
msgid ""
"There is a feature in various linkers which is most commonly called 'as-"
"needed'. When the linker detects that no symbols are referenced in a "
"consumer executable (exe) or dynamically shared objects (DSO) it elides "
"this ``DT_NEEDED`` entry from the ``ELF dynamic section``. We do this so "
"that our software loads more quickly. It also leads to the possibility of"
" implementing a new feature in ``conda-build`` whereby it would warn when"
" a 'library' package (identified via some heuristics, a ``lib`` prefix "
"perhaps; existence of DSOs?) ends up in the runtime requirements but is "
"not actually used in any of the exes or DSOs. This would allow us to "
"consider these as candidates for removal thus making the package less "
"heavy-weight. For the curious, there's a function in ``conda-build`` "
"called ``check_overlinking`` and the original intention for this function"
" was to do this but it ended up checking for the opposite (worse!) "
"problem of 'underlinking'. This we define as missing dependencies, which "
"happens frequently when something gets installed in the ``host prefix`` "
"through a transitive dependency and is therefore not listed as a direct "
"run dependency despite being directly linked to some exe(s) and/or DSO(s)"
" in the package (build systems are sometimes 'greedy' linking to whatever"
" they can find). We denote this as 'worse' because when someone installs "
"these two packages (3 including the dependency) and then removes (and "
"cleans/prunes the environment) the one that directly depends upon the "
"third package, the third package will also be removed because conda has "
"no idea your package needs it and it will no longer load."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:415
msgid ""
"Unfortunately in most linkers the flag used to enable this (``--as-"
"needed``) only takes effect for libraries that appear after it on the "
"command-line. We have patched our ``libtool`` package (with a modified "
"patch sourced from Gentoo) so this flag, if found, is moved to before any"
" libraries in this linker command-line. The patch can be found at "
"https://github.com/AnacondaRecipes/libtool-"
"feedstock/blob/master/recipe/0001-link-as-needed.patch"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:420
msgid ""
"To ensure we take advantage of this flag, it is necessary to run "
"``autoreconf -vfi`` so that the ``libtool`` script is regenerated. Before"
" running ``configure``. For this you will need to add some dependencies "
"to ``meta.yaml``: ``libtool``, ``autoconf``, ``automake``, ``make`` and "
"occasionallty for good measure: ``pkg-config`` and ``bison``, depending "
"on whether the package needs them or not."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:426
msgid "RPATHs (specifically rpath-link)"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:428
msgid ""
"On Linux, transitive DSOs are not searched for by the static linker in "
"any ``rpath`` entries. Instead, for the linker to find these DSOs, it "
"needs prompting by adding ``-Wl,-rpath-link,$PREFIX/lib`` to ``LDFLAGS``."
" In the future we may add this to the Linux compiler activation script. "
"These transitive DSOs are not added as ``DT_NEEDED`` entries in the top-"
"level DSO, they are inspected by the static linker for symbol resolution "
"purposes only so it is generally safe to add this flag."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:435
msgid "CDT packages"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/compiler-tools.rst:437
msgid ""
"``CDT`` packages are an 'Anaconda Distribution' invention. They consist "
"of repackaged 'CentOS6' packages for libraries such as the ``X11`` and "
"``OpenGL`` stacks, unpacked into our compilers inbuilt sysroot. These "
"allow us to link to these system libraries in a way that pins the "
"compatibility level to that of 'CentOS6'. 'conda-forge' provide their own"
" ``X11`` libraries and what to do with ``OpenGL`` is currently a subject "
"of discussion. We plan to use meta-packages and possibly mutex packages "
"to enable sharing recipes and avoiding conflicts between ``CDT`` ``X11`` "
"packages and ``conda-forge`` ``X11`` packages."
msgstr ""

