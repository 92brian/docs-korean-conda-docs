# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Anaconda, Inc.
# This file is distributed under the same license as the Conda package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Conda  \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 12:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:3
msgid "Build scripts (build.sh, bld.bat)"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:5
msgid ""
"The ``build.sh`` file is the build script for Linux and macOS and "
"``bld.bat`` is the build script for Windows. These scripts contain the "
"logic that carries out your build steps. Traditionally it has also "
"included install steps. With the traditional one-package-per-recipe way "
"of doing things, anything that your build script copies into the "
"``$PREFIX`` or ``%PREFIX%`` folder will be included in your output "
"package. For example, this ``build.sh``:"
msgstr ""

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:17
msgid ""
"If you don't care about deploying your package with pip on PyPI, this can"
" save you a lot of time in figuring out the proper way to include "
"additional files with setup.py."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:21
msgid ""
"There are many environment variables defined for you to use in build.sh "
"and bld.bat. Please see :ref:`env-vars` for more information."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:24
msgid ""
"As of conda-build 2.1, you can also define multiple output packages. Each"
" package has its own script or list of files to include. The rules for "
"these outputs are documented at :ref:`package-outputs`. When any output "
"is defined, this overrides the default behavior of bundling anything in "
"``$PREFIX``. So to output multiple packages from a single recipe, remove "
"any installation steps from ``build.sh`` or ``bld.bat`` and do them "
"instead in your install script(s) for each output."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:32
msgid ""
"``build.sh`` and ``bld.bat`` are optional. You can instead use the "
"``build/script`` key in your ``meta.yaml``, with each value being either "
"a string command or a list of string commands. Any commands you put there"
" must be able to run on every platform for which you build. For example, "
"you can't use the ``cp`` command because cmd.exe won't understand it in "
"Windows."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:38
msgid "``build.sh`` is run with ``bash`` and ``bld.bat`` is run with ``cmd.exe``."
msgstr ""

#: ../../source/user-guide/tasks/build-packages/build-scripts.rst:40
msgid ""
"There is some development towards the ability to use bash scripts in "
"Windows, but this is not currently supported."
msgstr ""

