# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Anaconda, Inc.
# This file is distributed under the same license as the Conda package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Conda  \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-11 11:28+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/user-guide/tutorials/build-pkgs.rst:3
msgid "Building conda packages from scratch"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:10
msgid ""
"This tutorial describes how to build a conda package for Pyinstrument by "
"writing the required files in the conda build recipe."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:15
msgid "Who is this for?"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:17
msgid ""
"This tutorial is for Windows, macOS and Linux users who wish to generate "
"a conda package by writing the necessary files. Prior knowledge of conda "
"build and conda recipes is helpful."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:25
msgid "Before you start"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:27
msgid "Check the :doc:`prerequisites <index>`."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:29
msgid "You should have already completed :doc:`build-pkgs-skeleton`."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:35
msgid "Editing the meta.yaml file"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:37
msgid ""
"Make a new directory for this tutorial named ``pyinstrument``, and then "
"change to the new directory:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:45
msgid ""
"To create a new ``meta.yaml`` file, open your favorite editor. Create a "
"new text file and insert the information shown below. A blank sample "
"``meta.yaml`` follows the table to make it easier to match up the "
"information."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:50
msgid ""
"NOTE: To allow correct sorting and comparison, specify ``version`` as a "
"string."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:56
msgid "name"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:57
#: ../../source/user-guide/tutorials/build-pkgs.rst:67
msgid "pyinstrument"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:58
msgid "version"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:59
msgid ""
"\"0.13.1\" (or latest from "
"https://github.com/joerick/pyinstrument/releases)"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:61
msgid "git_rev"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:62
msgid "v0.13.1 (or latest from https://github.com/joerick/pyinstrument/releases)"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:64
msgid "git_url"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:65
msgid "https://github.com/joerick/pyinstrument.git"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:66
msgid "imports"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:68
msgid "home"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:69
msgid "https://github.com/joerick/pyinstrument"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:70
msgid "license"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:71
msgid "BSD"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:72
msgid "license_file"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:73
msgid "LICENSE"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:102
msgid ""
"Save the file in the same ``pyinstrument`` directory as ``meta.yaml``. It"
" should match :download:`this meta.yaml file <meta.yaml>`."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:110
msgid "Writing the build script files build.sh and bld.bat"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:112
msgid "Besides ``meta.yaml``, 2 files are required for a build:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:114
msgid "``build.sh``---Shell script for macOS and Linux."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:115
msgid "``bld.bat``---Batch file for Windows."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:117
msgid ""
"These 2 build files contain all the variables, such as for 32-bit or "
"64-bit architecture---the ARCH variable---and the build environment "
"prefix---PREFIX. The 2 files ``build.sh`` and ``bld.bat`` must be in the "
"same directory as your ``meta.yaml`` file."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:123
msgid ""
"This tutorial describes how to make both ``build.sh`` and ``bld.bat`` so "
"that other users can build the appropriate package for their "
"architecture."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:127
msgid ""
"Open a text editor and create a new file named ``bld.bat``. Type the text"
" exactly as shown:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:135
msgid ""
"NOTE: In ``bld.bat``, the best practice is to to add ``if errorlevel 1 "
"exit 1`` after every command so that if the command fails, the build "
"fails."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:139
msgid ""
"Save this new file ``bld.bat`` to the same directory where you put your "
"``meta.yaml`` file."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:142
msgid ""
"Open a text editor and create a new file named ``build.sh``. Enter the "
"text exactly as shown:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:150
msgid ""
"Save your new ``build.sh`` file to the same directory where you put the "
"``meta.yaml`` file."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:153
msgid ""
"You can run ``build.sh`` with ``bash -x -e``. The ``-x`` makes it echo "
"each command that is run, and the ``-e`` makes it exit whenever a command"
" in the script returns nonzero exit status. If you need to revert this in"
" the script, use the ``set`` command in ``build.sh``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:163
msgid "Building and installing"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:165
msgid ""
"Now that you have your 3 new build files ready, you are ready to create "
"your new package with conda build and install the package on your local "
"computer."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:169
msgid "Run conda build:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:175
msgid ""
"When conda build is finished, it displays the package filename and "
"location."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:178
msgid "In this case the file is saved to:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:185
msgid ""
"NOTE: Save this path and file information for the next task. The exact "
"path and filename varies depending on your operating system and whether "
"you are using Anaconda or Miniconda. The ``conda-build`` command tells "
"you the exact path and filename."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:191
msgid ""
"Install your newly built program on your local computer by using the "
"``use-local`` flag:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:198
msgid "If there are no error messages, Pyinstrument installed successfully."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:205
msgid "Converting a package for use on all platforms"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:207
msgid ""
"Now that you have built a package for your current platform with conda "
"build, you can convert it for use on other platforms by using the 2 build"
" files, ``build.sh`` and ``bld.bat``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:211
msgid "Use the ``conda convert`` command with a platform specifier from the list:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:214
msgid "``osx-64``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:215
msgid "``linux-32``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:216
msgid "``linux-64``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:217
msgid "``win-32``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:218
msgid "``win-64``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:219
msgid "``all``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:221
msgid "EXAMPLE: Using the platform specifier ``all``:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:228
#: ../../source/user-guide/tutorials/build-pkgs.rst:292
msgid ""
"NOTE: Change your path and filename to the path and filename you saved in"
" :ref:`build-and-install`."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:235
msgid "Optional---Using PyPI as the source instead of GitHub"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:237
msgid ""
"You can use PyPI or another repository instead of GitHub. There is little"
" difference to conda build between building from Git versus building from"
" a tarball on a repository like PyPI. Because the same source is hosted "
"on PyPI and GitHub, you can easily find a script on PyPI instead of "
"GitHub."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:243
msgid "Replace this ``source`` section:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:250
msgid "With the following:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:259
msgid ""
"NOTE: The ``md5`` is found on the `PyPI Pyinstrument page "
"<https://pypi.python.org/pypi/pyinstrument>`_."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:266
msgid "Optional---Uploading new packages to Anaconda.org"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:268
msgid ""
"After converting your files for use on other platforms, you may choose to"
" upload your files to Anaconda.org, formerly known as binstar.org. It "
"only takes a minute to do if you have a free Anaconda.org account."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:272
msgid ""
"If you have not done so already, open a free Anaconda.org account and "
"record your new user name and password."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:275
msgid ""
"Run the command ``conda install anaconda-client``, and then enter your "
"Anaconda.org username and password."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:278
msgid ""
"Log into your `Anaconda.org <http://anaconda.org>`_ account with the "
"command:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:285
msgid "Upload your package to Anaconda.org:"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:295
msgid ""
"TIP: To save time, you can set conda to always upload a successful build "
"to Anaconda.org with the command: ``conda config --set anaconda_upload "
"yes``."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:302
msgid "More information"
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:304
msgid ""
"For more information about all the possible values that can go into the "
"``meta.yaml`` file, see :doc:`../tasks/build-packages/define-metadata`."
msgstr ""

#: ../../source/user-guide/tutorials/build-pkgs.rst:308
msgid ":doc:`../../commands`."
msgstr ""

